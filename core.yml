openapi: 3.0.1
info:
  title: Core
  description: All included utility endpoints for Basiq partners
  version: 3.0.0
servers:
- url: https://au-api.basiq.io/
paths:
  /token:
    post:
      tags:
      - Authentication
      summary: Generate an auth token
      description: Use this endpoint to retrieve a token that will be passed as authorization
        header for Basiq API
      operationId: postToken
      parameters:
      - name: basiq-version
        in: header
        required: true
        schema:
          type: string
          example: "3.0"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                scope:
                  type: string
                userId: 
                  type: string
            examples:
              client_access:
                summary: For all client side requests
                value:
                  scope: CLIENT_ACCESS
                  userId: "6dd30ce4-d4ba-11ec-9d64-0242ac120002"
              server_access:
                summary: For all server side requests
                value:
                  scope: SERVER_ACCESS
      responses:
        200:
          description: 'Return token object that will be used for Basiq API requests. '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPostResponse'
        400:
          description: Returns error that server cannot or will not process the request
            as it does not conform.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      security:
      - api_key: []
  /jobs/{jobId}:
    get:
      tags:
      - Jobs
      summary: Retrieve a job
      description: Retrieves the details of an existing job. You need only supply the
        unique job identifier that was returned upon job creation.
      operationId: getJobs
      parameters:
      - name: jobId
        in: path
        description: The identifier of the job to be retrieved.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Returns a job details if a valid job ID was provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobData'
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      security:
      - application:
        - SERVER_ACCESS
        - CLIENT_ACCESS
  /users:
    post:
      tags:
      - Users
      summary: Create a user
      description: Creates a new Basiq user object
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true
      responses:
        201:
          description: Returns the user object if the creation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPostResponse'
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      security:
      - application:
        - SERVER_ACCESS
      x-codegen-request-body-name: user
  /users/{userId}:
    get:
      tags:
      - Users
      summary: Retrieve a user
      description: Retrieves the details of an existing user. You need only supply the unique user identifier that was returned upon user creation.
      operationId: getUser
      parameters:
      - name: userId
        in: path
        description: The identifier of the user to be retrieved.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Returns a user if a valid user ID was provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponse'
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Error status response code indicates that the request has not
            been applied because it lacks valid authentication credentials for the
            target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      security:
      - application:
        - SERVER_ACCESS
        - CLIENT_ACCESS
    post:
      tags:
      - Users
      summary: Update a user
      description: Updates the specified user by setting the values of the parameters
        passed. Any parameters not provided will be left unchanged.
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: The identifier of the user to be retrieved.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUser'
        required: true
      responses:
        200:
          description: Returns the user object if the update succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPostResponse'
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      security:
      - application:
        - SERVER_ACCESS
      x-codegen-request-body-name: user
    delete:
      tags:
      - Users
      summary: Delete a user
      description: Permanently deletes a user along with all of their associated connection
        details. All data associated with this user will deleted. You need only supply
        the unique user identifier that was returned upon user creation.
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: User identification.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Deletion succeeded.
          content: {}
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BadRequestError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Returns error response code indicates that the server is not
            ready to handle the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusServiceUnavailableError'
      security:
      - application:
        - SERVER_ACCESS
  /users/{userId}/connections:
    get:
      tags:
      - Connections
      summary: List all connections
      description: Returns a list of connections belonging to this user. Each entry in the array is a separate object. If no data is returned, the resulting array will be empty.
      operationId: getConnections
      parameters:
      - name: userId
        in: path
        description: User identifier.
        required: true
        schema:
          type: string
      - name: filter
        in: query
        description: Connections filters, id, status, institution.id. e.g institution.id.eq('AU00000')
        schema:
          type: string
      responses:
        200:
          description: Returns details of connections.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionsGetResponseResource'
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Returns error response code indicates that the server is not
            ready to handle the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusServiceUnavailableError'
      security:
      - application:
        - SERVER_ACCESS
  /users/{userId}/connections/refresh:
    post:
      tags:
      - Connections
      summary: Refresh all connections
      description: Use this to refresh all connections belonging to the specified user.
      operationId: refreshConnections
      parameters:
      - name: userId
        in: path
        description: The identifier of the user.
        required: true
        schema:
          type: string
      responses:
        202:
          description: Returns a created jobs resource, if the operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionsRefreshResource'
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      security:
      - application:
        - SERVER_ACCESS
  /users/{userId}/connections/{connectionId}:
    get:
      tags:
      - Connections
      summary: Retrieve a connection
      description: Use this to retrieve details of a specific connection. Note that due to security the loginId, password, securityCode are never returned.
      operationId: getConnection
      parameters:
      - name: userId
        in: path
        description: The identifier of the user.
        required: true
        schema:
          type: string
      - name: connectionId
        in: path
        description: The identifier of the connection.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Returns details of a connection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionGetResponseResource'
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Error status response code indicates that the request has not
            been applied because it lacks valid authentication credentials for the
            target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Returns error response code indicates that the server is not
            ready to handle the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusServiceUnavailableError'
      security:
      - application:
        - SERVER_ACCESS
        - CLIENT_ACCESS
    delete:
      tags:
      - Connections
      summary: Delete a connection
      description: Permanently deletes a connection. This does not include the existing account and transaction data associated with it. This can not be undone.
      operationId: deleteConnection
      parameters:
      - name: userId
        in: path
        description: The identifier of the user.
        required: true
        schema:
          type: string
      - name: connectionId
        in: path
        description: The identifier of the connection.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Returns an empty body if the delete succeeded.
          content: {}
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Returns error response code indicates that the server is not
            ready to handle the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusServiceUnavailableError'
      security:
      - application:
        - SERVER_ACCESS
  /users/{userId}/connections/{connectionId}/refresh:
    post:
      tags:
      - Connections
      summary: Refresh a connection
      description: Use this to refresh an existing connection. This will not return a new connection. Instead will return a job resource which is resonsible for refreshing the connection and fetching data asynchronously. Use this job resource to track the connections progress.
      operationId: refreshConnection
      parameters:
      - name: userId
        in: path
        description: The identifier of the user.
        required: true
        schema:
          type: string
      - name: connectionId
        in: path
        description: The identifier of the connection.
        required: true
        schema:
          type: string
      responses:
        202:
          description: Returns a created job resource, if the operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionResponseResource'
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Returns error response code indicates that the server is not
            ready to handle the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusServiceUnavailableError'
      security:
      - application:
        - SERVER_ACCESS
  /users/{userId}/jobs:
    get:
      tags:
      - Jobs
      summary: Get user jobs
      description: Retrieves the details of all existing and previous jobs associated with a user.
      operationId: getUserJobs
      parameters:
      - name: userId
        in: path
        description: User identifier
        required: true
        schema:
          type: string
      - name: filter
        in: query
        description: Connection identification filter. e.g. connection.id.eq('ab63cd')
        schema:
          type: string
      responses:
        200:
          description: Returns a list of jobs with details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobsResponseResource'
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      security:
      - application:
        - SERVER_ACCESS
  /users/{userId}/consents:
    get:
      tags:
      - User consent
      summary: Retrieve current consent
      description: Retrieves the specified users current, active consent
      operationId: getConsent
      parameters:
      - name: userId
        in: path
        description: The identifier of the user 
        required: true
        schema:
          type: string
      responses:
        200:
          description: Returns an active user consent if one exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConsentGetResponse'
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Error status response code indicates that the request has not
            been applied because it lacks valid authentication credentials for the
            target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      security:
      - application:
        - SERVER_ACCESS
        - CLIENT_ACCESS
  /users/{userId}/consents/{consentId}:
    delete:
      tags:
      - User consent
      summary: Delete a user consent
      description: Permanently deletes a users consent, this action cannot be undone. 
      operationId: deleteConsent
      parameters:
      - name: userId
        in: path
        description: User identification.
        required: true
        schema:
          type: string
      - name: consentId
        in: path
        description: Consent identification.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Deletion succeeded.
          content: {}
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BadRequestError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Returns error response code indicates that the server is not
            ready to handle the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StatusServiceUnavailableError'
      security:
      - application:
        - SERVER_ACCESS
 
components:
  schemas:
    AccountClass:
      required:
      - product
      - type
      type: object
      properties:
        type:
          type: string
          description: Account type
          example: savings
        product:
          type: string
          description: Product name.
          example: saver
    AccountsContainer:
      required:
      - data
      - type
      type: object
      properties:
        type:
          type: string
          description: Type always "list".
          example: list
        data:
          type: array
          description: Accounts details
          items:
            $ref: '#/components/schemas/AccountsData'
    AccountsData:
      required:
      - accountNo
      - availableFunds
      - balance
      - class
      - currency
      - id
      - lastUpdated
      - links
      - name
      - status
      - type
      type: object
      properties:
        type:
          type: string
          description: Type always "account".
          example: account
        id:
          type: string
          description: Account identification.
          example: 319ae910
        name:
          type: string
          description: Account name.
          example: Business account
        currency:
          type: string
          description: Currency
          example: AUD
        class:
          $ref: '#/components/schemas/AccountClass'
        accountNo:
          type: string
          description: Account number
          example: "105148119695"
        availableFunds:
          type: string
          description: Account available funds, nullable.
          nullable: true
          example: "200.54"
        balance:
          type: string
          description: Account balance, nullable.
          nullable: true
          example: "100.12"
        lastUpdated:
          type: string
          description: Account last updated date and time.
          example: "2017-09-28T11:15:09.756Z"
        status:
          type: string
          description: Account status.
          example: available
          enum:
          - available
          - unavailable
        links:
          $ref: '#/components/schemas/ConnectionAccountLinks'
    ConnectionAccountLinks:
      required:
      - self
      - transactions
      type: object
      properties:
        transactions:
          type: string
          description: transactions link to the transactions associated with this
            account
          example: https://au-api.basiq.io/users/ea3a81/transactions?filter=account.id.eq('s55bf3')
        self:
          type: string
          description: self link to the requested account
          example: https://au-api.basiq.io/users/cd6fbd92/accounts/319ae910
    BadRequestError:
      required:
      - correlationId
      - data
      - type
      type: object
      properties:
        type:
          type: string
          description: Always "list".
          example: list
        correlationId:
          type: string
          description: Unique identifier for this particular occurrence of the problem.
          example: ac5ah5i
        data:
          type: array
          description: Error data.
          items:
            required:
            - code
            - type
            type: object
            properties:
              type:
                type: string
                description: Type of the response, always "error"
                example: error
              title:
                type: string
                description: Title of the error
                example: Parameter not valid.
              code:
                type: string
                description: Application-specific error code, expressed as a string
                  value.
                example: parameter-not-valid
                enum:
                - parameter-not-supplied
                - parameter-not-valid
                - unsupported-accept
                - invalid-content
                - institution-not-supported
                - invalid-credentials
              detail:
                type: string
                description: Human-readable explanation specific to this occurrence
                  of the problem.
                example: ID value is not valid.
              source:
                $ref: '#/components/schemas/Source'
    ConnectionGetResponseResource:
      title: ConnectionGetResponseResource
      required:
      - createdDate
      - id
      - institution
      - links
      - type
      type: object
      properties:
        type:
          type: string
          description: Type, always "connection".
          example: connection
        id:
          type: string
          description: A string that uniquely identifies the user connection.
          example: "61723"
        createdDate:
          type: string
          description: Created date of the connection, available only for SERVER_SCOPE.
          example: "2019-07-29T07:34:09Z"
        lastUsed:
          type: string
          description: UTC Date and Time of when the connection was last used, in
            RFC 3339 format, available only for SERVER_SCOPE.
          example: "2020-06-22T11:15:09Z"
        accounts:
          $ref: '#/components/schemas/AccountsContainer'
        institution:
          $ref: '#/components/schemas/ConnectionInstitution'
        profile:
          $ref: '#/components/schemas/ConnectionProfile'
        status:
          type: string
          description: Indicates the connection status, available only for SERVER_SCOPE.
          example: active
          enum:
          - active
          - pending
          - invalid
        links:
          $ref: '#/components/schemas/GetConnectionLinks'
      description: Object containing details for connection post.
    ConnectionInstitution:
      title: ConnectionInstitution
      required:
      - id
      - links
      - type
      type: object
      properties:
        id:
          type: string
          description: Institution id
          example: "AU00000"
        links:
          $ref: '#/components/schemas/ResourceLink'
        type:
          type: string
          description: Always "institution".
          example: institution
      description: Institution details.
    ConnectionProfile:
      required:
      - emailAddresses
      - firstName
      - fullName
      - lastName
      - middleName
      - phoneNumbers
      - physicalAddresses
      type: object
      properties:
        emailAddresses:
          type: array
          description: User email address
          example:
          - gavin@hooli.com
          items:
            type: string
        firstName:
          type: string
          description: User first name
          example: Gavin
        fullName:
          type: string
          description: User full name
          example: Gavin Belson
        lastName:
          type: string
          description: User last name
          example: Belson
        middleName:
          type: string
          description: User middle name
        phoneNumbers:
          type: array
          description: User phone number
          example:
          - XXXX 888 991
          items:
            type: string
        physicalAddresses:
          type: array
          description: Physical user addresses
          items:
            $ref: '#/components/schemas/PhysicalAddresses'
    ConnectionResponseResource:
      title: ConnectionResponseResource
      required:
      - id
      - links
      - type
      type: object
      properties:
        type:
          type: string
          description: Type, always "job".
          example: job
        id:
          type: string
          description: Job identification.
          example: "29523951"
        links:
          $ref: '#/components/schemas/ResourceLink'
      description: Object containing details for connection post.
    ConnectionsData:
      required:
      - createdDate
      - id
      - institution
      - links
      - type
      type: object
      properties:
        type:
          type: string
          description: Type, always "connection".
          example: connection
        id:
          type: string
          description: Connection identification.
          example: "61723"
        status:
          type: string
          description: Connection status, available only for SERVER_SCOPE.
          example: active
          enum:
          - active
          - pending
          - invalid
        createdDate:
          type: string
          description: Created date of the connection, available only for SERVER_SCOPE.
          example: "2019-07-29T07:34:09Z"
        lastUsed:
          type: string
          description: Connection last used date, available only for SERVER_SCOPE.
          example: "2020-06-22T11:15:09Z"
        institution:
          $ref: '#/components/schemas/ConnectionInstitution'
        links:
          $ref: '#/components/schemas/GetConnectionsLinks'
    ConnectionsGetResponseResource:
      title: ConnectionsGetResponseResource
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: Type, always "list".
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/ConnectionsData'
        links:
          $ref: '#/components/schemas/ResourceLink'
      description: Object containing details for connections.
    ConnectionsRefreshResource:
      title: ConnectionsRefreshResource
      required:
      - data
      - type
      type: object
      properties:
        type:
          type: string
          description: Type, always "list".
          example: list
        data:
          type: array
          description: Job details data.
          items:
            $ref: '#/components/schemas/ConnectionResponseResource'
      description: Object containing details for connections refresh.
    ForbiddenAccessError:
      required:
      - correlationId
      - data
      - type
      type: object
      properties:
        type:
          type: string
          description: Always "list".
          example: list
        correlationId:
          type: string
          description: Unique identifier for this particular occurrence of the problem.
          example: ac5ah5i
        data:
          type: array
          description: Error data.
          items:
            required:
            - code
            - source
            - type
            type: object
            properties:
              type:
                type: string
                description: Type of the response, always "error"
                example: error
              title:
                type: string
                description: Title of the error
                example: Forbidden Access
              code:
                type: string
                description: Application-specific error code, expressed as a string
                  value.
                example: forbidden-access
                enum:
                - forbidden-access
                - no-production-access
                - access-denied
              detail:
                type: string
                description: Human-readable explanation specific to this occurrence
                  of the problem.
                example: Access to this resource is forbidden.
              source:
                $ref: '#/components/schemas/Source'
    GetConnectionLinks:
      title: GetConnectionLinks
      required:
      - self
      - user
      type: object
      properties:
        accounts:
          type: string
          description: Accounts reference url.
          example: https://au-api.basiq.io/users/cd6fbd92/accounts?filter=institution.id.eq('AU00000')
        self:
          type: string
          description: Connection self reference url.
          example: https://au-api.basiq.io/users/cd6fbd92-0b12-43ba-a3c1-286dd5f4f396/connections/29523951
        transactions:
          type: string
          description: Transactions reference url.
          example: https://au-api.basiq.io/users/cd6fbd92/transactions?filter=institution.id.eq('AU00000')
        user:
          type: string
          description: User reference url.
          example: https://au-api.basiq.io/users/cd6fbd92
      description: Object containing links to resources.
    GetConnectionsLinks:
      title: GetConnectionsLinks
      required:
      - institution
      - self
      type: object
      properties:
        accounts:
          type: string
          description: Accounts reference url.
          example: https://au-api.basiq.io/users/cd6fbd92/accounts?filter=institution.id.eq('AU00000')
        institution:
          type: string
          description: Institution details.
          example: https://au-api.basiq.io/institutions/AU00000
        self:
          type: string
          description: Connection self reference url.
          example: https://au-api.basiq.io/users/cd6fbd92/connections/29523951
        transactions:
          type: string
          description: Transactions reference url.
          example: https://au-api.basiq.io/users/cd6fbd92/transactions?filter=institution.id.eq('AU00000')
      description: Object containing links to resources.
    GetUserAccount:
      title: UserGetAccount
      required:
      - count
      - data
      - type
      type: object
      properties:
        type:
          type: string
          description: Always "list".
          example: list
        count:
          type: integer
          description: Count of accounts.
          format: int64
          example: 7
        data:
          type: array
          description: Accounts data.
          items:
            $ref: '#/components/schemas/GetUserAccountData'
      description: Container object containing account data.
    GetUserAccountData:
      title: UserGetAccountData
      required:
      - id
      - links
      - type
      type: object
      properties:
        type:
          type: string
          description: Always "account".
          example: account
        id:
          type: string
          description: Account identification.
          example: aaaf2c3b
        links:
          $ref: '#/components/schemas/ResourceLink'
      description: Object containing account data.
    GetUserConnection:
      title: UserGetConnection
      required:
      - count
      - data
      - type
      type: object
      properties:
        type:
          type: string
          description: Always "list".
          example: list
        count:
          type: integer
          description: Count of accounts.
          format: int64
          example: 5
        data:
          type: array
          description: Connections data.
          items:
            $ref: '#/components/schemas/GetUserConnectionData'
      description: Container object containing connection data.
    GetUserConnectionData:
      title: GetUserConnectionData
      required:
      - id
      - links
      - type
      type: object
      properties:
        type:
          type: string
          description: Always "connection".
          example: connection
        id:
          type: string
          description: Connection identification.
          example: aaaf2c3b
        links:
          $ref: '#/components/schemas/ResourceLink'
      description: Object containing connection data.
    GetUserLinks:
      title: GetUserLinks
      required:
      - accounts
      - auth_link
      - connections
      - self
      - transactions
      type: object
      properties:
        accounts:
          type: string
          description: Accounts reference url.
          example: https://au-api.basiq.io/users/a3dgf4567a89/accounts
        connections:
          type: string
          description: Connections reference url.
          example: https://au-api.basiq.io/users/a3dgf4567a89/connections
        self:
          type: string
          description: User self reference url.
          example: https://au-api.basiq.io/user/a3dgf4567a89
        transactions:
          type: string
          description: Transactions reference url.
          example: https://au-api.basiq.io/users/a3dgf4567a89/transactions
      description: Object containing links to resources.
    InstitutionModel:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: Institution identification.
          example: AU00000
    InternalServerError:
      required:
      - correlationId
      - data
      - type
      type: object
      properties:
        type:
          type: string
          description: Always "list".
          example: list
        correlationId:
          type: string
          description: Unique identifier for this particular occurrence of the problem.
          example: ac5ah5i
        data:
          type: array
          description: Error data.
          items:
            required:
            - code
            - type
            type: object
            properties:
              code:
                type: string
                description: Application-specific error code, expressed as a string
                  value.
                example: internal-server-error
                enum:
                - internal-server-error
              detail:
                type: string
                description: Human-readable explanation specific to this occurrence
                  of the problem.
                example: Internal Server error. Contact support.
              title:
                type: string
                description: Title of the error
                example: Internal Server error.
              type:
                type: string
                description: Type of the response, always "error"
                example: error
    JobData:
      title: JobData
      required:
      - id
      - created
      - steps
      - updated
      type: object
      properties:
        type:
          type: string
          description: Value is "job".
          example: job
        id:
          type: string
          description: A string that uniquely identifies the job.
          example: e9132638
        created:
          type: string
          description: The date time when the job was created.
          example: "2020-06-10T09:59:00Z"
        updated:
          type: string
          description: The date time when the job was last updated.
          example: "2020-06-10T09:59:00Z"
        steps:
          type: array
          description: List of steps that need to be completed.
          items:
            $ref: '#/components/schemas/JobsStep'
          example: [
                      {
            "title": "verify-credentials",
            "status": "success",
            "result": [
              {
                "type": "link",
                "url": "/users/ea3a81/connections/8fce3b"
              }
            ]
            },
            {
              "title": "retrieve-accounts",
              "status": "in-progress",
              "result": null
            },
            {
              "title": "retrieve-transactions",
              "status": "pending",
              "result": null
            }
            ]
        links:
          $ref: '#/components/schemas/JobsLinks'
      description: Container object, containing job details.
    JobsData:
      title: JobsData
      required:
      - created
      - id
      - institution
      - steps
      - updated
      type: object
      properties:
        type:
          type: string
          description: Value is "job".
          example: job
        id:
          type: string
          description: A string that uniquely identifies the job.
          example: e9132638
        created:
          type: string
          description: The date time when the job was created.
          example: "2020-06-10T09:59:00Z"
        updated:
          type: string
          description: The date time when the job was last updated.
          example: "2020-06-10T09:59:00Z"
        institution:
          $ref: '#/components/schemas/JobsInstitution'
        steps:
          type: array
          description: List of steps that need to be completed.
          items:
            $ref: '#/components/schemas/JobsStep'
        links:
          $ref: '#/components/schemas/JobsLinks'
      description: Container object, containing job details.
    JobsInstitution:
      title: Institution
      required:
      - id
      - links
      - type
      type: object
      properties:
        id:
          type: string
          description: A string that uniquely identifies institution.
          example: AU00000
        links:
          $ref: '#/components/schemas/JobsLinks'
        type:
          type: string
          description: Always "institution".
          example: institution
      description: Institution details.
    JobsLinks:
      title: JobsLinks
      required:
      - self
      type: object
      properties:
        self:
          type: string
          description: URL of the resource
          example: https://au-api.basiq.io/jobs/61723
        source:
          type: string
          description: Resource that initiated creation of this Job. For example,
            for operations on Connection, this is a Connection URL. This is only returned
            for Connection jobs and not for Statement jobs.
          example: https://au-api.basiq.io/users/ea3a81/connections/8fce3b
      description: Links to the resources.
    JobsResponseResource:
      required:
      - data
      - links
      - size
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the response, always "list".
          example: list
        data:
          type: array
          description: Container object, containing job details.
          items:
            $ref: '#/components/schemas/JobsData'
        size:
          type: integer
          description: Size of the all the jobs.
          format: int64
          example: 100
        links:
          $ref: '#/components/schemas/ResourceLink'
    JobsResult:
      title: JobsResult
      type: object
      properties:
        code:
          type: string
          description: In case of failed job, displays error code.
          enum:
          - success
          - user-action-required
          - system-unavailable
          - maintenance
          - connector-error
          - institution-not-found
          - institution-not-available
          - institution-disabled
          - missing-required-field
          - missing-required-field-value
          - invalid-field-value
          - invalid-csv-row
          - row-count-exceeded
          - account-data-differs
          - empty-file
          - bank-statement-invalid
          - bank-statement-new-product
          - bank-statement-parsing-error
          - bank-statement-not-supported
          - txn-after-last-updated-date
          - invalid-connection
          - unknown-error
          - job-timed-out
        details:
          type: string
          description: In case of failed job, displays details of the error.
        title:
          type: string
          description: In case of failed job, displays error title.
        type:
          type: string
          description: In case of success, Always "link".
          example: link
        url:
          type: string
          description: In case of success, URL of the updated (or created) resources.
      description: Result object containing a list of URLs or null. Otherwise if a
        step failed contains an error response.
    JobsStep:
      title: JobsStep
      required:
      - result
      - status
      type: object
      properties:
        title:
          type: string
          description: Name of the step the job needs to complete.
          example: retrieve-accounts
          enum:
          - verify-credentials
          - retrieve-accounts
          - retrieve-transactions
          - retrieve-statements
        status:
          type: string
          description: Status of the job step 
          example: success
          enum:
          - pending
          - in-progress
          - success
          - failed
        result:
          $ref: '#/components/schemas/JobsResult'
      description: List of steps that need to be completed.
    NotFoundError:
      required:
      - correlationId
      - data
      - type
      type: object
      properties:
        type:
          type: string
          description: Always "list".
          example: list
        correlationId:
          type: string
          description: Unique identifier for this particular occurrence of the problem.
          example: ac5ah5i
        data:
          type: array
          description: Error data.
          items:
            required:
            - code
            - type
            type: object
            properties:
              code:
                type: string
                description: Application-specific error code, expressed as a string
                  value.
                example: resource-not-found
                enum:
                - resource-not-found
              detail:
                type: string
                description: Human-readable explanation specific to this occurrence
                  of the problem.
                example: Resource not found.
              title:
                type: string
                description: Title of the error
                example: Requested resource is not found.
              type:
                type: string
                description: Type of the response, always "error"
                example: error
    PhysicalAddresses:
      title: PhysicalAddresses
      required:
      - addressLine1
      - addressLine2
      - addressLine3
      - city
      - countryCode
      - formattedAddress
      - postcode
      - state
      type: object
      properties:
        addressLine1:
          type: string
          description: User address.
          example: "13/91 Fisher Rd"
        addressLine2:
          type: string
          description: Always "null"
          nullable: true
        addressLine3:
          type: string
          description: Always "null"
          nullable: true
        city:
          type: string
          description: City
          example: Sydney
        country:
          type: string
        countryCode:
          type: string
          description: Country code
          example: AU
        formattedAddress:
          type: string
          description: Address formatted.
          example: "13/91 Fisher Rd, Dee Why NSW 2099, Australia"
        postcode:
          type: string
          description: Post code
          example: "2099"
        state:
          type: string
          description: State
          example: NSW
      description: User physical addresses holding the connection.
    ResourceLink:
      title: ResourceLink
      required:
      - self
      type: object
      properties:
        self:
          type: string
          description: URL of the resource.
          example: https://au-api.basiq.io/link/a3dgf4567a89
      description: Link object containing a link to the resource, self reference.
    Source:
      title: Source
      type: object
      properties:
        parameter:
          type: string
          description: String indicating which URI query parameter caused the error.
          example: id
      description: An object containing references to the source of the error.
    StatusServiceUnavailableError:
      required:
      - correlationId
      - data
      - type
      type: object
      properties:
        type:
          type: string
          description: Always "list".
          example: list
        correlationId:
          type: string
          description: Unique identifier for this particular occurrence of the problem.
          example: ac5ah5i
        data:
          type: array
          description: Error data.
          items:
            required:
            - code
            - type
            type: object
            properties:
              code:
                type: object
                description: Application-specific error code, expressed as a string
                  value.
                example: service-unavailable
              detail:
                type: string
                description: Human-readable explanation specific to this occurrence
                  of the problem.
                example: Service Unavailable. Try again later.
              title:
                type: string
                description: Title of the error
                example: Service Unavailable
              type:
                type: string
                description: Type of the response, always "error"
                example: error
    UnauthorizedError:
      required:
      - correlationId
      - data
      - type
      type: object
      properties:
        correlationId:
          type: string
          description: Unique identifier for this particular occurrence of the problem.
          example: ac5ah5i
        data:
          type: array
          description: Error data.
          items:
            required:
            - code
            - type
            type: object
            properties:
              code:
                type: string
                description: Application-specific error code, expressed as a string
                  value.
                example: unauthorized-access
                enum:
                - unauthorized-access
                - invalid-authorization-token
              detail:
                type: string
                description: Human-readable explanation specific to this occurrence
                  of the problem.
                example: You are not authorized to access this resource
              title:
                type: string
                description: Title of the error
                example: Unauthorized Access
              type:
                type: string
                description: Type of the response, always "error"
                example: error
        type:
          type: string
          description: Always "list".
          example: list
    UserConsentGetResponse:
      title: UserConsentGetResponse
      required:
      - type
      - size
      - data
      type: object
      properties:
        type:
          type: string
          description: Always "list".
          example: list
        size:
          type: integer
          description: Number of items in the list
          format: int64
          example: 1
        data:
          type: array
          items: 
            type: object
          description: User consents data.
          example: [
                    {
                      type: 'consentPolicy',
                      duration: 31536000,
                      status: 'active',
                      purpose: {
                        primary: {
                          title: 'Services requiring full ongoing Personal, Account and Transaction details',
                          description: 'We need ongoing access to your Personal, Account and Transaction details in order to fully enable our services.'
                        }
                      },
                      data: {
                        retainData: true,
                        permissions: [
                          {
                            scope: 'customer.person.detail',
                            required: true,
                            entity: 'connection',
                            information: {
                              name: 'Name, occupation, contact details',
                              description: 'This allows access to personally identifiable information. Specifically your name, occupation, address(es) and contact details.',
                              attributeList: [
                                'Name',
                                'Occupation',
                                'Phone',
                                'Email address',
                                'Mail address',
                                'Residential address'
                              ]
                            },
                            purpose: {
                              title: 'Your Details',
                              description: 'We need to confirm your identity.'
                            }
                          },
                          {
                            scope: 'account.detail',
                            required: true,
                            entity: 'account',
                            information: {
                              name: 'Account balance and details',
                              description: 'This allows access to detailed information of your accounts. It includes basic account information plus account identifiers and product information. It does not include transaction data.',
                              attributeList: [
                                'Name of account',
                                'Type of account',
                                'Account balance',
                                'Account number',
                                'Interest rates',
                                'Fees',
                                'Discounts',
                                'Account terms',
                                'Account mail address'
                              ]
                            },
                            purpose: {
                              title: 'Account Details',
                              description: 'We need to capture your account details.'
                            }
                          },
                          {
                            scope: 'transaction.detail',
                            required: true,
                            entity: 'transaction',
                            information: {
                              name: 'Transaction details',
                              description: 'This allows access to transaction data for your accounts. It includes all account transaction data.',
                              attributeList: [
                                'Incoming and outgoing transactions',
                                'Amounts',
                                'Dates',
                                'Descriptions of transactions',
                                'Who you have sent money to and received money from'
                              ]
                            },
                            purpose: {
                              title: 'Transaction details',
                              description: 'This allows access to transaction data for your accounts. It includes all account transaction data.'
                            }
                          }
                        ]
                      },
                    }
                  ]
      description: List containing the current active user consent.
    UserGetResponse:
      title: UserGetResponse
      required:
      - accounts
      - connections
      - email
      - id
      - links
      - mobile
      - name
      - type
      type: object
      properties:
        type:
          type: string
          description: Always "user".
          example: user
        id:
          type: string
          description: User identification.
          example: ea3a81
        accounts:
          $ref: '#/components/schemas/GetUserAccount'
        connections:
          $ref: '#/components/schemas/GetUserConnection'
        email:
          type: string
          description: User email or empty.
          format: email
          example: gavin@hooli.com
        mobile:
          type: string
          description: User mobile number, or empty.
          example: +61410888666
        name:
          type: string
          description: Name, or empty.
          example: Gavin Belson
        links:
          $ref: '#/components/schemas/GetUserLinks'
      description: User object with details if the creation succeeded.
    UserPostResponse:
      title: UserPostResponse
      required:
      - id
      - links
      - mobile
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the response, always "user".
          example: user
        id:
          type: string
          description: A string that uniquely identifies the user.
          example: e1956419
        email:
          type: string
          description: The end-users email address.
          format: email
          example: gavin@hooli.com
        mobile:
          type: string
          description: The end-users mobile number.
          example: +61410888999
        links:
          $ref: '#/components/schemas/ResourceLink'
      description: User object with details if the creation succeeded.
    createUser:
      type: object
      properties:
        email:
          type: string
          description: The end-users email address. Mandatory if mobile is not supplied.
          example: "gavin@hooli.com"
        mobile:
          type: string
          description: The end-users mobile number, supplied in international format. +[country-code][mobileno]. Mandatory if email is not supplied.
          example: "+61410888999"
    updateUser:
      type: object
      properties:
        email:
          type: string
          description: The end-users email address.
          example: "gavin@hooli.com"
        mobile:
          type: string
          description: The end-users mobile number.
          example: "+61410888666"
    TokenPostResponse:
      required:
      - access_token
      - expires_in
      - token_type
      type: object
      properties:
        access_token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        expires_in:
          type: integer
          description: Expires in seconds
          format: int64
          example: 3600
        token_type:
          type: string
          example: Bearer
  securitySchemes:
    basicAuth:    
      type: http
      scheme: basic
    api_key:
      type: apiKey
      name: Authorization
      in: header
      x-default: "NjMxMjNmMWMtZjYxMy00ZjMyLWFiYzUtYzBhZDdhYTY2YmU1OjQ3NWYwMzhkLTBlZmItNGM1ZS1iMzQ0LTAzMzYxOTkyYTRlMw=="
    application:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://au-api.basiq.io/token
          scopes:
            SERVER_ACCESS: Server access scope
            CLIENT_ACCESS: Client access scope
security:
    - basicAuth: []  
x-readme:
  explorer-enabled: true
  proxy-enabled: false
  samples-enabled: true
  samples-languages: 
  - curl
  - node
  - ruby
  - javascript
  - python