openapi: 3.0.0
info:
  title: Data
  version: 3.0.0
  license:
    name: Commercial
    url: https://basiq.io
servers:
- url: https://au-api.basiq.io
paths:
  /users/{userId}/accounts:
    get:
      tags:
      - Accounts
      summary: List all accounts
      description: List all accounts belonging to a user
      operationId: getAccounts
      parameters:
      - name: userId
        in: path
        description: User identifier
        required: true
        schema:
          type: string
      - name: filter
        in: query
        description: Account filters; account.id, connection.id, institution.id, Only equals (eq) and not equals (ne) operations are currently supported.
        schema:
          type: string
      responses:
        200:
          description: Returns a account with details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponseResource'
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                      Bad Request:
                       value:
                        type: list
                        correlationId: ac5ah5i
                        data:
                          - type: error
                            title: Parameter not valid.
                            code: parameter-not-valid
                            detail: ID value is not valid.
                            source:
                              parameter: id
                      Invalid Filters:
                        value:
                          type: list
                          correlationId: ac5ah55
                          data:
                            - type: error
                              code: parameter-not-valid
                              title: Parameter value is not valid
                              detail: The provided filter parameter is in invalid format or unsupported
                              source:
                                parameter: filter
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      security:
      - services_token: []
  /users/{userId}/accounts/{accountId}:
    get:
      tags:
      - Accounts
      summary: Retrieve an account
      description: Retrieve a specific account belonging to a user
      operationId: getAccount
      parameters:
      - name: userId
        in: path
        description: User identifier
        required: true
        schema:
          type: string
      - name: accountId
        in: path
        description: Account identifier
        required: true
        schema:
          type: string
      - name: filter
        in: query
        description: Account filters; account.id, connection.id, institution.id, Only equals (eq) and not equals (ne) operations are currently supported.
        schema:
          type: string
      responses:
        200:
          description: Returns a account with details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponseResource'
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      security:
      - services_token: []
  /users/{userId}/transactions:
    get:
      tags:
      - Transactions
      summary: List all transactions
      description: List all transactions belonging to a specified user
      operationId: getTransactions
      parameters:
      - name: userId
        in: path
        description: User identifier.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: This represents the maximum number of items that may be included
          in the response (maximum of 500). Note that by default 500 items are returned
          if this value is not specified.
        schema:
          type: integer
          format: int64
          default: 500
      - name: filter
        in: query
        description: Transaction filters; account.id, transaction.postDate, transaction.status, institution.id, transaction.direction, transaction.class
        schema:
          type: string
      responses:
        200:
          description: 'Returns a paginated list with a data property that contains
            an array of transactions. Each entry in the array is a separate object.
            If no data is returned, the resulting array will be empty. '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsGetResource'
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                    Bad Request:
                     value:
                      type: list
                      correlationId: ac5ah5i
                      data:
                        - type: error
                          title: Parameter not valid.
                          code: parameter-not-valid
                          detail: ID value is not valid.
                          source:
                            parameter: id
                    Invalid Filters:
                      value:
                        type: list
                        correlationId: ac5ah55
                        data:
                          - type: error
                            code: parameter-not-valid
                            title: Parameter value is not valid
                            detail: The provided filter parameter is in invalid format or unsupported
                            source:
                              parameter: filter
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      security:
      - services_token: []
  /users/{userId}/transactions/{transactionId}:
    get:
      tags:
      - Transactions
      summary: Retrieve a transaction
      description: Retrieve an existing transaction
      operationId: getTransaction
      parameters:
      - name: userId
        in: path
        description: The identifier of the user.
        required: true
        schema:
          type: string
      - name: transactionId
        in: path
        description: The identifier of the transaction.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Returns a transaction if a valid transaction ID was provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionData'
        400:
          description: Returns error that server cannot or will not process the request
            due to something that is perceived to be a client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        403:
          description: Error that access is forbidden and tied to the application
            logic, such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        404:
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Returns error response code indicates that the server encountered
            an unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Returns error response code indicates that the server is not
            ready to handle the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusServiceUnavailableError'
      security:
      - services_token: []
  /users/{userId}/connections:
    get:
      tags:
        - Connections
      summary: List all connections
      description: >-
        Returns a list of connections belonging to this user. Each entry in the
        array is a separate object. If no data is returned, the resulting array
        will be empty.
      operationId: getConnections
      parameters:
        - name: userId
          in: path
          description: User identifier.
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: >-
            Connections filters, id, status, institution.id. e.g
            institution.id.eq('AU00000')
          schema:
            type: string
      responses:
        '200':
          description: Returns details of connections.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionsGetResponseResource'
        '400':
          description: >-
            Returns error that server cannot or will not process the request due
            to something that is perceived to be a client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                    Bad Request:
                     value:
                      type: list
                      correlationId: ac5ah5i
                      data:
                        - type: error
                          title: Parameter not valid.
                          code: parameter-not-valid
                          detail: ID value is not valid.
                          source:
                            parameter: id
                    Invalid Filters:
                      value:
                        type: list
                        correlationId: ac5ah55
                        data:
                          - type: error
                            code: parameter-not-valid
                            title: Parameter value is not valid
                            detail: The provided filter parameter is in invalid format or unsupported
                            source:
                              parameter: filter
        '403':
          description: >-
            Error that access is forbidden and tied to the application logic,
            such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        '404':
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Returns error response code indicates that the server encountered an
            unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '503':
          description: >-
            Returns error response code indicates that the server is not ready
            to handle the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusServiceUnavailableError'
      security:
        - services_token: []
  /users/{userId}/connections/refresh:
    post:
      tags:
        - Connections
      summary: Refresh all connections
      description: Use this to refresh all connections belonging to the specified user.
      operationId: refreshConnections
      parameters:
        - name: userId
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Returns a created jobs resource, if the operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionsRefreshResource'
        '400':
          description: >-
            Returns error that server cannot or will not process the request due
            to something that is perceived to be a client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: >-
            Error that access is forbidden and tied to the application logic,
            such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        '404':
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Returns error response code indicates that the server encountered an
            unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      security:
        - services_token: []
  /users/{userId}/connections/{connectionId}:
    get:
      tags:
        - Connections
      summary: Retrieve a connection
      description: >-
        Use this to retrieve details of a specific connection. Note that due to
        security the loginId, password, securityCode are never returned.
      operationId: getConnection
      parameters:
        - name: userId
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          description: The identifier of the connection.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns details of a connection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionGetResponseResource'
        '400':
          description: >-
            Returns error that server cannot or will not process the request due
            to something that is perceived to be a client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: >-
            Error status response code indicates that the request has not been
            applied because it lacks valid authentication credentials for the
            target resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: >-
            Error that access is forbidden and tied to the application logic,
            such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        '404':
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Returns error response code indicates that the server encountered an
            unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '503':
          description: >-
            Returns error response code indicates that the server is not ready
            to handle the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusServiceUnavailableError'
      security:
        - services_token: []
    delete:
      tags:
        - Connections
      summary: Delete a connection
      description: >-
        Permanently deletes a connection. This does not include the existing
        account and transaction data associated with it. This can not be undone.
      operationId: deleteConnection
      parameters:
        - name: userId
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          description: The identifier of the connection.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returns an empty body if the delete succeeded.
          content: {}
        '400':
          description: >-
            Returns error that server cannot or will not process the request due
            to something that is perceived to be a client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: >-
            Error that access is forbidden and tied to the application logic,
            such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        '404':
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Returns error response code indicates that the server encountered an
            unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '503':
          description: >-
            Returns error response code indicates that the server is not ready
            to handle the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusServiceUnavailableError'
      security:
        - services_token: []
  /users/{userId}/connections/{connectionId}/refresh:
    post:
      tags:
        - Connections
      summary: Refresh a connection
      description: >-
        Use this to refresh an existing connection. This will not return a new
        connection. Instead will return a job resource which is resonsible for
        refreshing the connection and fetching data asynchronously. Use this job
        resource to track the connections progress.
      operationId: refreshConnection
      parameters:
        - name: userId
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          description: The identifier of the connection.
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Returns a created job resource, if the operation succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionResponseResource'
        '400':
          description: >-
            Returns error that server cannot or will not process the request due
            to something that is perceived to be a client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: >-
            Error that access is forbidden and tied to the application logic,
            such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        '404':
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Returns error response code indicates that the server encountered an
            unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '503':
          description: >-
            Returns error response code indicates that the server is not ready
            to handle the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusServiceUnavailableError'
      security:
        - services_token: []
  /users/{userId}/connections/{connectionId}/purge:
    post:
      tags:
        - Connections
      summary: Purge connection data
      description: >-
        Use this to remove all user data for a specific institution.
        This endpoint should be used only for active user connections.
      operationId: purgeConnectionData
      parameters:
        - name: userId
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: string
        - name: connectionId
          in: path
          description: The identifier of the connection.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returns an empty body if the delete succeeded.
          content: {}
        '400':
          description: >-
            Returns error that server cannot or will not process the request due
            to something that is perceived to be a client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '403':
          description: >-
            Error that access is forbidden and tied to the application logic,
            such as insufficient rights to a resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenAccessError'
        '404':
          description: Returns error indicating that server can't find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Returns error response code indicates that the server encountered an
            unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        '503':
          description: >-
            Returns error response code indicates that the server is not ready
            to handle the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusServiceUnavailableError'
      security:
        - services_token: []
  /connectors:
    get:
      tags:
        - Connectors
      summary: Retrieve connectors
      description: 'NOTE: This end point requires authentication.'
      operationId: getConnectors
      parameters:
        - name: filter
          in: query
          description: >-
              Filter parameter can be used to filter connector list by connector property. This parameter should contain a comma-separated list of filter statements.</br>

              A filter statement is composed of the entity name (in this case, it is always 'connector'), the property name (e.g., 'stage'), the filter operator (e.g., 'eq'), and the quoted string value in parentheses (e.g., "('live')").</br>

              The following list of regular expressions describes acceptable filter statements:</br>

              • (connector).(id).(eq)\(('[A-Z][A-Z][0-9]{5}')\)</br>

              • (connector).(method).(eq)\(('web'||'open-banking'|'pdf'|'csv')\)</br>

              • (connector).(status).(eq|ne)\(('operational'|'degraded-performance'|'partial-outage'|'major-outage'|'under-maintenance')\)</br>

              • (connector).(status).(in)\(([\w\W]+)\)</br>

              • (connector).(stage).(eq|ne)\(('live'|'beta'|'alpha')\)</br>

              • (connector).(stage).(in)\(([\w\W]+)\)</br>

              • (connector).(scopes).(in|eq|ne)\(([\w\W]+)\)</br>

              • (connector).(institution).(country).(eq|ne)\(('Australia'|'New Zealand')\)</br>

              • (connector).(institution).(country).(in)\(([\w\W]+)\)</br>

              • (connector).(institution).(tier).(eq|ne)\(('1'|'2'|'3'|'4')\)</br>

              • (connector).(institution).(tier).(in)\(([\W\d]+)\)</br>

              • (connector).(institution).(type).(eq|ne)\(('Bank'|'Bank (Foreign)'|'Test Bank'|'Credit Union'|'Financial Services'|'Superannuation')\)</br>

              • (connector).(authorization).(type).(eq|ne)\(('user'|'user-mfa'|'user-mfa-intermittent'|'other'|'token')\)</br>

              • (connector).(authorization).(type).(in)\(([\w\W]+)\)</br>

              • (connector).(connectorEngine).(eq|ne)\(('chrome'|'node')\)</br>

              Multiple filter definitions should be separated with a comma (,).</br>

              For example, this filter statement will keep only live tier 1 and tier 2 institutions: filter=connector.stage.eq('live'),connector.institution.tier.in('1','2')</br>
          schema:
            type: string
      responses:
        '200':
          description: Returns data of single connector.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorsList'
        '400':
          description: >-
            Returns error that server cannot or will not process the request due
            to something that is perceived to be a client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                    Invalid Filters:
                      value:
                        type: list
                        correlationId: ac5ah55
                        data:
                          - type: error
                            code: parameter-not-valid
                            title: Parameter value is not valid
                            detail: The provided filter parameter is in invalid format or unsupported
                            source:
                              parameter: filter
        '401':
          description: Returns error that indicates unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Returns error indicating that server cannot find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Returns error response code indicates that the server encountered an
            unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      security:
        - services_token: []
  /connectors/{connectorId}/{method}:
    get:
      tags:
        - Connectors
      summary: Retrieve a connector
      description: 'NOTE: This end point requires authentication.'
      operationId: getConnector
      parameters:
        - name: connectorId
          in: path
          description: Connector ID
          required: true
          schema:
            pattern: ^[A-Z]{2}[0-9]{5}$
            type: string
        - name: method
          in: path
          description: Connector method
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns data of single connector.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
        '400':
          description: >-
            Returns error that server cannot or will not process the request due
            to something that is perceived to be a client error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
              examples:
                        Invalid Filters:
                          value:
                            type: list
                            correlationId: ac5ah55
                            data:
                              - type: error
                                code: parameter-not-valid
                                title: Parameter value is not valid
                                detail: The provided filter parameter is in invalid format or unsupported
                                source:
                                  parameter: filter
        '401':
          description: Returns error that indicates unauthorized access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Returns error indicating that server cannot find requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: >-
            Returns error response code indicates that the server encountered an
            unexpected condition that prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
      security:
        - services_token: []
components:
  schemas:
    termDepositMetadata:
      required: 
        - lodgementDate
        - maturityDate
        - maturityInstructions
      properties: 
        lodgementDate:
          type: string
          description: The lodgement date of the original deposit. 
        maturityDate:
          type: string
          description: Maturity date for the term deposit. 
        maturityAmount: 
          type: string
          description: Amount to be paid upon maturity. If absent, it implies the amount to paid is variable and cannot currently be calculated. 
        maturityCurrency: 
          type: string
          description: If absent assumes AUD. 
        maturityInstructions: 
          type: string
          description: Current instructions on action to be taken at maturity. This includes default actions that may be specified in the terms and conditions for the product e.g. roll-over to the same term and frequency of interest payments. 
          enum:  
           - HOLD_ON_MATURITY
           - PAID_OUT_AT_MATURITY
           - ROLLED_OVER
          example: PAID_OUT_AT_MATURITY
    AccountClass:
      required:
      - type
      - product
      properties:
        type:
          type: string
          description: Account type
          example: mortgage
        product:
          type: string
          description: Product name.
          example: Hooli Home Loan
    ConnectionsGetResponseResource:
      title: ConnectionsGetResponseResource
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: Type, always "list".
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/ConnectionsData'
        links:
          $ref: '#/components/schemas/ResourceLink'
      description: Object containing details for connections.
    ConnectionsRefreshResource:
      title: ConnectionsRefreshResource
      required:
        - data
        - type
      type: object
      properties:
        type:
          type: string
          description: Type, always "list".
          example: list
        data:
          type: array
          description: Job details data.
          items:
            $ref: '#/components/schemas/ConnectionResponseResource'
      description: Object containing details for connections refresh.
    AccountsContainer:
      required:
        - data
        - type
      type: object
      properties:
        type:
          type: string
          description: Type always "list".
          example: list
        data:
          type: array
          description: Accounts details
          items:
            $ref: '#/components/schemas/AccountsData'
    AccountsData:
      required:
        - type
        - id
        - lastUpdated
        - accountNo
        - availableFunds
        - balance
        - class
        - currency
        - links
        - name
        - status      
      type: object
      properties:
        type:
          type: string
          description: Type always "account".
          example: account
        id:
          type: string
          description: Account identification.
          example: 319ae910
        name:
          type: string
          description: Account name.
          example: Business account
        currency:
          type: string
          description: Currency
          example: AUD
        class:
          $ref: '#/components/schemas/AccountClass'
        accountNo:
          type: string
          description: Account number
          example: '105148119695'
        availableFunds:
          type: string
          description: Account available funds, nullable.
          nullable: true
          example: '200.54'
        balance:
          type: string
          description: Account balance, nullable.
          nullable: true
          example: '100.12'
        lastUpdated:
          type: string
          description: Account last updated date and time.
          example: '2017-09-28T11:15:09.756Z'
        status:
          type: string
          description: Account status.
          example: available
          enum:
            - available
            - unavailable
        links:
          $ref: '#/components/schemas/ConnectionAccountLinks'
    ResponseFormat:
      type: string
      description: ResponseFormat identifies response data format
    Colors:
      type: object
      properties:
        primary:
          type: string
          description: Primary primary institution color
      description: Colors contains institution colors type
    LogoResourceLinks:
      required:
        - full
        - square
      type: object
      properties:
        full:
          type: string
          description: URL to full size logo
          example: https://example.com/AU00000-full.svg
        square:
          type: string
          description: Square formatted logo URL
          example: https://example.com/AU00000.svg
      description: institution logo resource links
    InstitutionLogoResource:
      required:
        - links
        - type
      type: object
      properties:
        colors:
          $ref: '#/components/schemas/Colors'
        links:
          $ref: '#/components/schemas/LogoResourceLinks'
        type:
          type: string
          description: |-
            Resource type identifier.
            image ImageResourceType
          example: image
          enum:
            - image
      description: Institution logo resource type
    ConnectionAccountLinks:
      required:
        - self
        - transactions
      type: object
      properties:
        transactions:
          type: string
          description: transactions link to the transactions associated with this account
          example: >-
            https://au-api.basiq.io/users/ea3a81/transactions?filter=account.id.eq('s55bf3')
        self:
          type: string
          description: self link to the requested account
          example: https://au-api.basiq.io/users/cd6fbd92/accounts/319ae910
    PhysicalAddresses:
      title: PhysicalAddresses
      required:
        - addressLine1
        - addressLine2
        - addressLine3
        - city
        - countryCode
        - formattedAddress
        - postcode
        - state
      type: object
      properties:
        addressLine1:
          type: string
          description: User address.
          example: 13/91 Fisher Rd
        addressLine2:
          type: string
          description: Always "null"
          nullable: true
        addressLine3:
          type: string
          description: Always "null"
          nullable: true
        city:
          type: string
          description: City
          example: Sydney
        country:
          type: string
        countryCode:
          type: string
          description: Country code
          example: AU
        formattedAddress:
          type: string
          description: Address formatted.
          example: 13/91 Fisher Rd, Dee Why NSW 2099, Australia
        postcode:
          type: string
          description: Post code
          example: '2099'
        state:
          type: string
          description: State
          example: NSW
      description: User physical addresses holding the connection.
    ConnectorsList:
      required:
        - data
        - links
        - totalCount
        - type
      type: object
      properties:
        data:
          type: array
          description: Data contains list of connectors
          items:
            $ref: '#/components/schemas/Connector'
        links:
          $ref: '#/components/schemas/ResourceLinks'
        totalCount:
          type: integer
          description: TotalCount contains total count of connectors
          format: int64
          example: 1
        type:
          $ref: '#/components/schemas/ResponseFormat'
      description: ConnectorsList contains list of connectors data.
    ResourceLinks:
      required:
        - self
      type: object
      properties:
        self:
          type: string
          description: URL to resource itself
      description: ResourceLinks contains resource links
    Connector:
      required:
        - authorization
        - id
        - institution
        - method
        - scopes
        - stage
        - stats
        - status
        - type
      type: object
      properties:
        authorization:
          $ref: '#/components/schemas/ConnectorAuthorization'
        id:
          maxLength: 7
          minLength: 7
          pattern: ^[A-Z]{2}[0-9]{5}$
          type: string
          description: Institution ID
          example: AU00000
        institution:
          $ref: '#/components/schemas/ConnectorInstitutionResource'
        links:
          $ref: '#/components/schemas/ResourceLinks'
        method:
          type: string
          description: Current Connector method
          example: web
        scopes:
          type: array
          description: Connector scopes array
          items:
            type: string
        stage:
          type: string
          description: Current Connector stage
          example: beta
        stats:
          $ref: '#/components/schemas/InstitutionPerformanceStats'
        status:
          $ref: '#/components/schemas/FeatureCondition'
        type:
          type: string
          description: |-
            Resource type identifier. It is always "connector" for this model.
            connector ConnectorEntityType
          example: connector
          enum:
            - connector
      description: Connector contains connector data.
    ConnectorAuthorization:
      required:
        - type
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/ConnectorAuthorizationMeta'
        type:
          type: string
          description: >-
            Authorization type identifier

            user AuthorizationUser  AuthorizationUser "User" authorization type
            identifier

            token AuthorizationToken AuthorizationToken "Token" authorization
            type identifier

            other AuthorizationOther  AuthorizationOther "Other" authorization
            type identifier

            user-mfa AuthorizationUserMfa  AuthorizationUserMfa "UserMfa"
            authorization type identifier

            user-mfa-intermittent AuthorizationUserMfaIntermittent
            AuthorizationUserMfaIntermittent "UserMfaIntermittent" authorization
            type identifier
          example: user
          enum:
            - user
            - token
            - other
            - user-mfa
            - user-mfa-intermittent
    FeatureCondition:
      type: string
      description: FeatureCondition type that describes an feature status for institution
    InstitutionPerformanceStats:
      type: object
      properties:
        averageDurationMs:
          type: object
          properties:
            retrieveAccounts:
              type: integer
              description: >-
                Connector average duration in milliseconds of <b>fetch
                accounts</b> step for institution
              format: int64
            retrieveMeta:
              type: integer
              description: >-
                Connector average duration in milliseconds of <b>fetch
                metadata</b> step for institution
              format: int64
            retrieveTransactions:
              type: integer
              description: >-
                Connector average duration in milliseconds of <b>fetch
                transactions</b> step for institution
              format: int64
            total:
              type: integer
              description: Total connector average duration in milliseconds
              format: int64
            verifyCredentials:
              type: integer
              description: >-
                Connector average duration in milliseconds of <b>verifiy
                credentials</b> step for institution
              format: int64
          description: >-
            AverageDurationMs average connector duration in milliseconds per
            segments.

            When durations are not known for institution this field will be
            `null`.
      description: >-
        InstitutionPerformanceStats response type for institution performance
        stats
    ConnectorAuthorizationMeta:
      type: object
      properties:
        forgotten_password_url:
          type: string
          description: URL to institution forgotten password page
          example: https://example.com/forgotten-password
        login_id_caption:
          type: string
          description: Login ID field caption that should be shown on UI
          example: User name
        password_caption:
          type: string
          description: Password field caption that should be shown on UI
          example: Password
        secondary_login_id_caption:
          type: string
          description: Secondary loginID caption that should be shown on UI
          example: Secondary login id
        security_code_caption:
          type: string
          description: Security code caption that should be shown on UI
          example: Security code
    ConnectorInstitutionResource:
      required:
        - country
        - logo
        - name
        - shortName
        - tier
        - type
      type: object
      properties:
        country:
          type: string
          description: Institution country name
          example: Australia
        cdrFAQ:
          type: string
          description: A link for Data Holder (where available) to a page explaining CDR data sharing process.
        logo:
          $ref: '#/components/schemas/InstitutionLogoResource'
        name:
          type: string
          description: Institution name
          example: Hooli Bank
        shortName:
          type: string
          description: Institution short name
          example: Hooli
        tier:
          type: string
          description: |-
            Institution tier identifier
            1 TierOne  TierOne tier identifier for tier1 institution
            2 TierTwo  TierTwo tier identifier for tier2 institution
            3 TierThree  TierThree tier identifier for tier3 institution
            4 TierFour  TierFour tier identifier for tier4 institution
          example: '1'
          enum:
            - '1'
            - '2'
            - '3'
            - '4'
        type:
          type: string
          description: >-
            Institution type identifier

            Bank BankInstitutionType  BankInstitutionType institution type
            identifier for Banks

            Bank (Foreign) BankForeignInstitutionType
            BankForeignInstitutionType institution type identifier for Foreign
            banks

            Test Bank TestBankInstitutionType  TestBankInstitutionType
            institution type identifier for Test banks

            Credit Union CreditUnionInstitutionType  CreditUnionInstitutionType
            institution type identifier for Credit union institutions

            Financial Services FinancialServicesInstitutionType
            FinancialServicesInstitutionType institution type identifier for
            Financial service institutions

            Superannuation SuperannuationInstitutionType
            SuperannuationInstitutionType institution type identifier for
            Superannuation institutions

            Building Society BuildingSociety  BuildingSociety institution type
            identifier for Building Society institutions

            Government Government  Government institution type identifier for
            Government institutions
          example: Bank
          enum:
            - Bank
            - Bank (Foreign)
            - Test Bank
            - Credit Union
            - Financial Services
            - Superannuation
            - Building Society
            - Government
      description: ConnectorInstitutionResource connector Institution  resource type
    UnauthorizedError:
      required:
        - correlationId
        - data
        - type
      type: object
      properties:
        correlationId:
          type: string
          description: Unique identifier for this particular occurrence of the problem.
          example: ac5ah5i
        data:
          type: array
          description: Error data.
          items:
            required:
              - code
              - type
            type: object
            properties:
              code:
                type: string
                description: Application-specific error code, expressed as a string value.
                example: unauthorized-access
                enum:
                  - unauthorized-access
                  - invalid-authorization-token
              detail:
                type: string
                description: >-
                  Human-readable explanation specific to this occurrence of the
                  problem.
                example: You are not authorized to access this resource
              title:
                type: string
                description: Title of the error
                example: Unauthorized Access
              type:
                type: string
                description: Type of the response, always "error"
                example: error
        type:
          type: string
          description: Always "list".
          example: list
    ConnectionProfile:
      required:
        - emailAddresses
        - firstName
        - fullName
        - lastName
        - middleName
        - phoneNumbers
        - physicalAddresses
      type: object
      properties:
        emailAddresses:
          type: array
          description: User email address
          example:
            - gavin@hooli.com
          items:
            type: string
        firstName:
          type: string
          description: User first name
          example: Gavin
        fullName:
          type: string
          description: User full name
          example: Gavin Belson
        lastName:
          type: string
          description: User last name
          example: Belson
        middleName:
          type: string
          description: User middle name
        phoneNumbers:
          type: array
          description: User phone number
          example:
            - XXXX 888 991
          items:
            type: string
        physicalAddresses:
          type: array
          description: Physical user addresses
          items:
            $ref: '#/components/schemas/PhysicalAddresses'
    ConnectionGetResponseResource:
      title: ConnectionGetResponseResource
      required:
        - createdDate
        - expiryDate
        - method
        - id
        - institution
        - links
        - type
      type: object
      properties:
        type:
          type: string
          description: Type, always "connection".
          example: connection
        id:
          type: string
          description: A string that uniquely identifies the user connection.
          example: '61723'
        method:
          type: string
          description: A string that uniquely identifies the user connections either it is web or openbanking
          example: 'web'
        createdDate:
          type: string
          description: Created date of the connection, available only for SERVER_SCOPE.
          example: '2019-07-29T07:34:09Z'
        expiryDate:
          type: string
          description: Expiry date of the connection.
          example: '2020-07-29T07:34:09Z'
        lastUsed:
          type: string
          description: >-
            UTC Date and Time of when the connection was last used, in RFC 3339
            format, available only for SERVER_SCOPE.
          example: '2020-06-22T11:15:09Z'
        accounts:
          $ref: '#/components/schemas/AccountsContainer'
        institution:
          $ref: '#/components/schemas/ConnectionInstitution'
        profile:
          $ref: '#/components/schemas/ConnectionProfile'
        status:
          type: string
          description: Indicates the connection status, available only for SERVER_SCOPE.
          example: active
          enum:
            - active
            - pending
            - invalid
        links:
          $ref: '#/components/schemas/GetConnectionLinks'
      description: Object containing details for connection post.
    ConnectionResponseResource:
      title: ConnectionResponseResource
      required:
        - id
        - links
        - type
      type: object
      properties:
        type:
          type: string
          description: Type, always "job".
          example: job
        id:
          type: string
          description: Job identification.
          example: '29523951'
        links:
          $ref: '#/components/schemas/ResourceLink'
      description: Object containing details for connection post.
    GetConnectionLinks:
      title: GetConnectionLinks
      required:
        - self
        - user
      type: object
      properties:
        accounts:
          type: string
          description: Accounts reference url.
          example: >-
            https://au-api.basiq.io/users/cd6fbd92/accounts?filter=institution.id.eq('AU00000')
        self:
          type: string
          description: Connection self reference url.
          example: >-
            https://au-api.basiq.io/users/cd6fbd92-0b12-43ba-a3c1-286dd5f4f396/connections/29523951
        transactions:
          type: string
          description: Transactions reference url.
          example: >-
            https://au-api.basiq.io/users/cd6fbd92/transactions?filter=institution.id.eq('AU00000')
        user:
          type: string
          description: User reference url.
          example: https://au-api.basiq.io/users/cd6fbd92
      description: Object containing links to resources.
    GetConnectionsLinks:
      title: GetConnectionsLinks
      required:
        - institution
        - self
      type: object
      properties:
        accounts:
          type: string
          description: Accounts reference url.
          example: >-
            https://au-api.basiq.io/users/cd6fbd92/accounts?filter=institution.id.eq('AU00000')
        institution:
          type: string
          description: Institution details.
          example: https://au-api.basiq.io/institutions/AU00000
        self:
          type: string
          description: Connection self reference url.
          example: https://au-api.basiq.io/users/cd6fbd92/connections/29523951
        transactions:
          type: string
          description: Transactions reference url.
          example: >-
            https://au-api.basiq.io/users/cd6fbd92/transactions?filter=institution.id.eq('AU00000')
      description: Object containing links to resources.
    ConnectionInstitution:
      title: ConnectionInstitution
      required:
        - id
        - links
        - type
      type: object
      properties:
        id:
          type: string
          description: Institution id
          example: AU00000
        links:
          $ref: '#/components/schemas/ResourceLink'
        type:
          type: string
          description: Always "institution".
          example: institution
      description: Institution details.
    ConnectionsData:
      required:
        - createdDate
        - expiryDate
        - id
        - method
        - institution
        - links
        - type
      type: object
      properties:
        type:
          type: string
          description: Type, always "connection".
          example: connection
        id:
          type: string
          description: Connection identification.
          example: '61723'
        method:
          type: string
          description: method identification.
          example: 'openbanking'
        status:
          type: string
          description: Connection status, available only for SERVER_SCOPE.
          example: active
          enum:
            - active
            - pending
            - invalid
        createdDate:
          type: string
          description: Created date of the connection, available only for SERVER_SCOPE.
          example: '2019-07-29T07:34:09Z'
        expiryDate:
          type: string
          description: Expiry date of the connection.
          example: '2020-07-29T07:34:09Z'
        lastUsed:
          type: string
          description: Connection last used date, available only for SERVER_SCOPE.
          example: '2020-06-22T11:15:09Z'
        institution:
          $ref: '#/components/schemas/ConnectionInstitution'
        links:
          $ref: '#/components/schemas/GetConnectionsLinks'
    AccountResponseResource:
      title: AccountResponseResource
      required:
      - type
      - id
      - creationDate
      - lastUpdated
      - status
      - name
      - bsb
      - unmaskedAccNum
      - maskedNumber
      - accountNo
      - accountHolder
      - isOwned
      - accountOwnership
      - bundleName
      - balance
      - availableFunds
      - creditLimit
      - amortisedLimit
      - currency
      - depositRate
      - lendingRate
      - class
      - connection
      - institution
      - transactionIntervals
      type: object
      properties:
        type:
          type: string
          description: Always "account".
          example: account
        id:
          type: string
          description: Uniquely identifies the account.
          example: s55bf3
        depositRate:
          type: string
          description: current rate to calculate interest earned being applied to deposit balances as it stands at the time of the API call. 
        lendingRate:
          type: string
          description: The current rate to calculate interest payable being applied to lending balances as it stands at the time of the API call. 
        bsb:
          type: string
          description: The unmasked BSB for the account. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces.
        unmaskedAccNum:
          type: string
          description: The unmasked account number for the account. Should not be supplied if the account number is a PAN requiring PCI compliance. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces.
        creationDate:
          type: string
          description: Date that the account was created (if known).
        accountHolder:
          type: string
          description: The name of the account holder as returned by the institution.
            No formatting is applied. Returns a string or null when not available.
          nullable: true
          example: GAVIN BELSON
        maskedNumber:
          type: string
          description: A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number.
        accountOwnership:
          type: string
          description: >-
            Value indicating the number of customers that have ownership of the account, according to the data holder's definition of account ownership. Does not indicate that all account owners are eligible consumers.
          example: ONE_PARTY
          enum:
          - UNKNOWN
          - ONE_PARTY
          - TWO_PARTY
          - MANY_PARTY
          - OTHER
        isOwned:
          type: boolean
          description: Flag indicating that the customer associated with the authorisation is an owner of the account. Does not indicate sole ownership, however. If not present then 'true' is assumed.
          example: 'true'
        amortisedLimit:
          type: string
          description: Object representing the available limit amortised according to payment schedule. Assumed to be zero if absent.
        bundleName:
          type: string
          description: Optional field to indicate if this account is part of a bundle that is providing additional benefit to the customer.
        accountNo:
          type: string
          description: BSB + account number.
          example: "600000157441965"
        availableFunds:
          type: string
          description: Funds that are available to an account holder for withdrawal
            or other use. This may include funds from an overdraft facility or line
            of credit. As well as funds classified as the available balance, such
            as from cleared and existing deposits.
          nullable: true
          example: "420.28"
        balance:
          type: string
          description: Amount of funds in the account right now - excluding any pending
            transactions. For a credit card this would be zero or the minus amount
            spent.
          nullable: true
          example: "356.50"
        creditLimit:
          type: string
          description: Eligible account types are credit-card, loan and mortgage.
          nullable: true
          example: "400000.00"
        class:
          $ref: '#/components/schemas/AccountClass'
          description: Describes the class(type) of accounts.
          enum:
          - transaction
          - savings
          - credit-card
          - mortgage
          - loan
          - investment
          - term-deposit
          - insurance
          - foreign
          - unknown
        connection:
          type: string
          description: The id of the connection resource that was used to retrieve
            the account.
          example: 8fce3b
        currency:
          type: string
          description: The currency the funds are stored in, using ISO 4217 standard.
          example: AUD
        institution:
          type: string
          description: The id of the institution resource the account originated from.
          example: AU00000
        lastUpdated:
          type: string
          description: Timestamp of last update, UTC, RFC 3339 format e.g. "2017-09-28T13:39:33Z"
          example: "2019-09-28T13:39:33Z"
        name:
          type: string
          description: Account name as defined by institution or user.
          example: Master Savings
        status:
          type: string
          description: Account status
          example: available
          enum:
          - available
          - unavailable
        meta:
          $ref: "#/components/schemas/Metadata"
        transactionIntervals:
          type: array
          description: |-
            An array of date intervals indicating the coverage of the transaction data relating to the account.
            Will return a single element for accounts sourced from a single bank connection.
            Will return multiple elements in cases where there have been multiple PDF/CSV uploads for an account.
          items:
            $ref: '#/components/schemas/AccountTransactionInterval'
      description: Container object with account details
    Metadata:
      properties:
        fees:
          type: array
          items:
            $ref: "#/components/schemas/feesAccountMetadata"
        depositRates:
          type: array
          items:
            $ref: "#/components/schemas/depositRateAccountMetadata"
        lendingRates:
          type: array
          items:
            $ref: "#/components/schemas/lendingRateAccountMetadata"
        termDeposit:
          type: array
          items: 
            $ref: "#/components/schemas/termDepositMetadata"
        loan:
          type: object
          properties:
            startDate:
              type: string
              description: >-
                Start date for the loan.
              example: "2019-10-01"
            endDate:
              type: string
              description: >-
                Date that the loan is due to be repaid in full.
              example: "2045-10-01"
            repaymentType:
              type: string
              description: >-
                Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST.
              example: "PRINCIPAL_AND_INTEREST"
              enum:
              - INTEREST_ONLY
              - PRINCIPAL_AND_INTEREST
            loanAmount:
              type: string
              description: Optional loan value. 
            loanCurrency:
              type: string
              description: If absent assumes AUD. 
            nextInstalmentDate: 
              type: string
              description: Next date that an instalment is required. 
            minInstalmentAmount:
              type: string
              description: Minimum amount of next instalment. 
            minInstalmentCurrency:
              type: string
              description: If absent assumes AUD. 
            maxRedraw: 
              type: string
              description: Maximum amount of funds that can be redrawn. If not present, redraw is not available even if the feature exists for the account. 
            maxRedrawCurrency: 
              type: string
              description: If absent assumes AUD. 
            minRedraw: 
              type: string
              description: Minimum redraw amount. 
            minRedrawCurrency:
              type: string
              description: If absent assumes AUD. 
            offsetAccountEnabled: 
              type: boolean
              description: Set to true if one or more offset accounts are configured for this loan account. 
              example: true
            offsetAccountIds:
              type: array
              description: The accountIDs of the configured offset accounts attached to this loan. Only offset accounts that can be accessed under the current authorisation should be included. It is expected behaviour that offsetAccountEnabled is set to true but the offsetAccountIds field is absent or empty. This represents a situation where an offset account exists but details can not be accessed under the current authorisation.
              items:
               type: string
            repaymentFrequency:
              type: string
              description: The expected or required repayment frequency. Formatted according to ISO 8601 Durations (excludes recurrence syntax).
        creditCard:
          required:
          - minPaymentAmount
          - paymentDueAmount
          - paymentDueDate
          type: object
          properties:
            minPaymentAmount:
              type: string
              description: >-
                The minimum payment amount due for the next card payment.
              example: "117.00"
            paymentDueAmount:
              type: string
              description: >-
                The amount due for the next card payment.
              example: "5847.00"
            paymentCurrency:
              type: string
              description: >-
                If absent assumes AUD.
              example: "AUD"
            paymentDueDate:
              type: string
              description: >-
                Date that the next payment for the card is due.
              example: "2023-12-12"
        addresses:
          type: array
          description: The addresses for the account to be used for correspondence.
          items: 
           type: object
           properties: 
            addressType:
              type: string
              description: The type of address object present.
              enum: 
                - paf
                - simple
              example: paf
            simple:
              required: 
                - addressLine1
                - city
                - state
              type: object
              properties:
                mailingName: 
                  type: string
                  description: Name of the individual or business formatted for inclusion in an address used for physical mail. 
                addressLine1: 
                  type: string
                  description: First line of the standard address object. 
                addressLine2: 
                  type: string
                  description: Second line of the standard address object.
                addressLine3: 
                  type: string
                  description: Third line of the standard address object.
                postcode: 
                  type: string
                  description: Mandatory for Australian addresses. 
                city: 
                  type: string
                  description: Name of the city or locality.
                state: 
                  type: string
                  description: Free text if the country is not Australia. If country is Australia then must be one of the values defined by the State Type Abbreviation in the PAF file format. NSW, QLD, VIC, NT, WA, SA, TAS, ACT. 
                country: 
                  type: string
                  description: A valid ISO 3166 Alpha-3 country code. Australia (AUS) is assumed if country is not present.
                paf:
                  required: 
                    - localityName
                    - postcode
                    - state
                  type: object
                  description: Australian address formatted according to the file format defined by the PAF file format.
                  properties:
                    dpid: 
                      type: string 
                      description: Unique identifier for an address as defined by Australia Post. Also known as Delivery Point Identifier.
                    thoroughfareNumber1: 
                      type: integer
                      description: Thoroughfare number for a property (first number in a property ranged address).
                    thoroughfareNumber1Suffix: 
                      type: string
                      description: Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated. 
                    thoroughfareNumber2: 
                      type: integer
                      description: Second thoroughfare number (only used if the property has a ranged address eg 23-25). 
                    thoroughfareNumber2Suffix: 
                      type: string
                      description: Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated.
                    flatUnitType: 
                      type: string
                      description: Type of flat or unit for the address. 
                    flatUnitNumber: 
                      type: string
                      description: Unit number (including suffix, if applicable).
                    floorLevelType: 
                      type: string
                      description: Type of floor or level for the address. 
                    floorLevelNumber: 
                      type: string
                      description: Floor or level number (including alpha characters). 
                    lotNumber: 
                      type: string
                      description: Allotment number for the address. 
                    buildingName1: 
                      type: string
                      description: Building/Property name 1. 
                    buildingName2: 
                      type: string
                      description: Building/Property name 2.
                    streetName: 
                      type: string
                      description: The name of the street.
                    streetType: 
                      type: string
                      description: The street type. Valid enumeration defined by Australia Post PAF code file. 
                    streetSuffix: 
                      type: string
                      description: The street type suffix. Valid enumeration defined by Australia Post PAF code file. 
                    postalDeliveryType: 
                      type: string
                      description: Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file. 
                    postalDeliveryNumber: 
                      type: integer
                      description: Postal delivery number if the address is a postal delivery type. 
                    postalDeliveryNumberPrefix: 
                      type: string
                      description: Postal delivery number prefix related to the postal delivery number. 
                    postalDeliveryNumberSuffix: 
                      type: string
                      description: Postal delivery number suffix related to the postal delivery number.
                    localityName: 
                      type: string
                      description: Full name of locality. 
                    postcode: 
                      type: string
                      description: Postcode for the locality.
                    state: 
                      type: string
                      description: State in which the address belongs. Valid enumeration defined by Australia Post PAF code file State Type Abbreviation. NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT. 
            
    lendingRateAccountMetadata:
      required:
      - lendingRateType
      - rate
      type: object
      properties:
        lendingRateType:
          type: string
          description: >-
             The type of rate (fixed, variable, etc).
          example: PURCHASE
          enum:
          - BUNDLE_DISCOUNT_FIXED
          - BUNDLE_DISCOUNT_VARIABLE
          - CASH_ADVANCE
          - DISCOUNT
          - FIXED
          - FLOATING
          - INTRODUCTORY
          - MARKET_LINKED
          - PENALTY
          - PURCHASE
          - VARIABLE
        rate:
          type: string
          description: >-
            The rate to be applied.
          example: "0.2024"
        comparisonRate:   
          type: string
          description: A comparison rate equivalent for this rate.
        calculationFrequency:
          type: string
          description: The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is 'applied' to the account (see applicationFrequency). Formatted according to ISO 8601 Durations (excludes recurrence syntax).
        applicationFrequency:
          type: string
          description: The period after which the calculated amount(s) (see calculationFrequency) are 'applied' (i.e. debited or credited) to the account. Formatted according to ISO 8601 Durations (excludes recurrence syntax).
        interestPaymentDue:
          type: string
          description: When loan payments are due to be paid within each period. The investment benefit of earlier payments affect the rate that can be offered.
          enum: 
            - IN_ADVANCE
            - IN_ARREARS
          example: IN_ADVANCE
        repaymentType:
          type: string
          description: Options in place for repayments. If absent, the lending rate is applicable to all repayment types.
          enum: 
            - INTEREST_ONLY
            - PRINCIPAL_AND_INTEREST
          example: INTEREST_ONLY
        loanPurpose:
          type: string
          description: The reason for taking out the loan. If absent, the lending rate is applicable to all loan purposes.
          enum: 
            - INVESTMENT
            - OWNER_OCCUPIED
          example: INVESTMENT
        tiers:
          type: object
          $ref: "#/components/schemas/feesAccountMetadepositratestiers"
          description: Rate tiers applicable for this rate.
        additionalValue:
          type: string
          description: Generic field containing additional information relevant to the depositRateType specified. Whether mandatory or not is dependent on the value of depositRateType.
        additionalInfo:
          type: string
          description: Display text providing more information on the rate. 
        additionalInfoUri:
          type: string
          description: Link to a web page with more information on this rate. 
    depositRateAccountMetadata:
      required:
      - depositRateType
      - rate
      type: object
      properties:
        depositRateType:
          type: string
          description: The type of rate (base, bonus, etc). 
          example: "VARIABLE"
          enum:
          - BONUS
          - BUNDLE_BONUS
          - FIXED
          - FLOATING
          - INTRODUCTORY
          - MARKET_LINKED
          - VARIABLE
        rate:
          type: string
          description: >-
            The rate to be applied.
          example: "0.0385"
        calculationFrequency:
          type: string
          description: The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is 'applied' to the account (see applicationFrequency). Formatted according to ISO 8601 Durations (excludes recurrence syntax). 
        applicationFrequency:
          type: string
          description: >-
            The period after which the calculated amount(s) are 'applied' (i.e. debited or credited) to the account.
          example: "P1M"
        tiers:
          type: object
          $ref: "#/components/schemas/feesAccountMetadepositratestiers"
          description: Rate tiers applicable for this rate. 
        additionalValue:
          type: string 
          description: Generic field containing additional information relevant to the lendingRateType specified. Whether mandatory or not is dependent on the value of lendingRateType. 
        additionalInfo:
          type: string
          description: Display text providing more information on the rate.
        additionalInfoUri: 
          type: string
          description: Link to a web page with more information on this rate. 
    feesAccountMetadepositratestiers:
      required: 
        - name
        - unitOfMeasure
        - minimumValue
      properties: 
        name: 
          type: string
          description: A display name for the tier. 
        unitOfMeasure:
          type: string
          description: The unit of measure that applies to the minimumValue and maximumValue values e.g. a DOLLAR amount. PERCENT (in the case of loan-to-value ratio or LVR). Tier term period representing a discrete number of MONTH's or DAY's (in the case of term deposit tiers).
          enum: 
            - DAY
            - DOLLAR
            - MONTH
            - PERCENT
        minimumValue:
          type: integer
          description: The number of unitOfMeasure units that form the lower bound of the tier. The tier should be inclusive of this value. 
        maximumValue: 
          type: integer
          description: >- 
            The number of unitOfMeasure units that form the upper bound of the tier or band. For a tier with a discrete value (as opposed to a range of values e.g. 1 month) this must be the same as minimumValue. Where this is the same as the minimumValue value of the next-higher tier the referenced tier should be exclusive of this value. For example a term deposit of 2 months falls into the upper tier of the following tiers: (1 - 2 months, 2 - 3 months). If absent the tier's range has no upper bound.. 
        rateApplicationMethod:
          type: string
          description: The method used to calculate the amount to be applied using one or more tiers. A single rate may be applied to the entire balance or each applicable tier rate is applied to the portion of the balance that falls into that tier (referred to as 'bands' or 'steps').
          enum: 
            - PER_TIER
            - WHOLE_BALANCE
        applicabilityConditions: 
          $ref: "#/components/schemas/feesAccountMetadepositratestiersRateCondition"
          description: Defines a condition for the applicability of a tiered rate. 
        additionalInfo:
          type: string
          description: Display text providing more information on the rate tier.
        additionalInfoUri:
          type: string
          description: Link to a web page with more information on this rate tier. 
    feesAccountMetadepositratestiersRateCondition:
      properties: 
        additionalInfo: 
          type: string
          description: Display text providing more information on the condition.
        additionalInfoUri:
          type: string
          description: Link to a web page with more information on this condition.       
    feesAccountMetadata:
      required:
      - name
      - feeType
      type: object
      properties:
        name:
          type: string
          description: (mandatory) - Name of the fee.
          example: Dishonour fee
        feeType:
          type: string
          description: (mandatory) - The type of fee.
          enum:
          - DEPOSIT
          - EVENT
          - EXIT
          - PAYMENT
          - PERIODIC
          - PURCHASE
          - TRANSACTION
          - UPFRONT
          - VARIABLE
          - WITHDRAWAL
          example: EVENT
        amount:
          type: string
          description: >-
            (conditional) - The amount charged for the fee.
          example: "10.00"
        balanceRate:
          type: string
          description: A fee rate calculated based on a proportion of the balance. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the feeType "VARIABLE" is supplied.
        transactionRate:
          type: string
          description: A fee rate calculated based on a proportion of a transaction. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the feeType "VARIABLE" is supplied.
        accruedRate:
          type: string
          description: A fee rate calculated based on a proportion of the calculated interest accrued on the account. One of amount, balanceRate, transactionRate and accruedRate is mandatory unless the feeType "VARIABLE" is supplied.
        accrualFrequency:
          type: string
          description: >-
            (optional) - The indicative frequency with which the fee is calculated on the account.
          example: "P1M"
        currency:
          type: string
          description: The currency the fee will be charged in. Assumes AUD if absent.
        additionalValue:
          type: string
          description: Display text providing more information on the fee.
        additionalInfo:
          type: string
          description: Display text providing more information on the fee.
        additionalInfoUri:
          type: string
          description: Link to a web page with more information on this fee.
        discounts:
          $ref: "#/components/schemas/feesdiscountMetadata"
          description: An optional list of discounts to this fee that may be available.
    feesdiscountMetadata:
      required: 
        - discountType
        - description  
      properties: 
        description: 
          type: string
          description: Description of the discount. 
        discountType:
          type: string
          description: The type of discount. See the next section for an overview of valid values and their meaning.
        amount:
          type: string
          description: Dollar value of the discount. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory.
        balanceRate:
          type: string
          description: A discount rate calculated based on a proportion of the balance. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee.
        transactionRate:
          type: string
          description: A discount rate calculated based on a proportion of a transaction. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory.
        accruedRate: 
          type: string
          description: A discount rate calculated based on a proportion of the calculated interest accrued on the account. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee.
        feeRate: 
          type: string
          description: A discount rate calculated based on a proportion of the fee to which this discount is attached. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee.
        additionalValue:
          type: string
          description: Generic field containing additional information relevant to the discountType specified. Whether mandatory or not is dependent on the value of discountType. 
        additionalInfo: 
          type: string
          description: Display text providing more information on the discount. 
        additionalInfoUri:
          type: string
          description: Link to a web page with more information on this discount. 
        eligibility: 
          $ref: "#/components/schemas/feesdiscounteligibilityMetadata"
          description: Eligibility constraints that apply to this discount. Mandatory if discountType is ELIGIBILITY_ONLY.
    feesdiscounteligibilityMetadata:
      required: 
        -  discountEligibilityType
      properties: 
        discountEligibilityType: 
          type: string
          description: The type of the specific eligibility constraint for a discountType.
          enum: 
            - BUSINESS
            - EMPLOYMENT_STATUS
            - INTRODUCTORY
            - MAX_AGE
            - MIN_AGE
            - MIN_INCOME
            - MIN_TURNOVER
            - NATURAL_PERSON
            - OTHER
            - PENSION_RECIPIENT
            - RESIDENCY_STATUS
            - STAFF
            - STUDENT
        additionalValue:
          type: string
          description: Generic field containing additional information relevant to the discountEligibilityType specified. Whether mandatory or not is dependent on the value of discountEligibilityType.
        additionalInfo: 
          type: string
          description: Display text providing more information on this eligibility constraint. Whether mandatory or not is dependent on the value of discountEligibilityType. 
        additionalInfoUri: 
          type: string
          description: Link to a web page with more information on this eligibility constraint. 
    AccountTransactionInterval:
      required:
      - from
      - to
      type: object
      properties:
        from:
          type: string
          description: Date of first transaction on this account
          example: "2018-07-01"
        to:
          type: string
          description: Date of last transaction on this account
          example: "2018-12-30"
    AccountsResponseResource:
      required:
      - data
      - links
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of the response, always "list".
          example: list
        data:
          type: array
          description: Container object, containing account details.
          items:
            $ref: '#/components/schemas/AccountResponseResource'
        links:
          $ref: '#/components/schemas/ResourceAccountLink'
    BadRequestError:
      required:
      - correlationId
      - data
      - type
      type: object
      properties:
        type:
          type: string
          description: Always "list".
          example: list
        correlationId:
          type: string
          description: Unique identifier for this particular occurrence of the problem.
          example: ac5ah5i
        data:
          type: array
          description: Error data.
          items:
            required:
            - code
            - type
            type: object
            properties:
              code:
                type: string
                description: Application-specific error code, expressed as a string
                  value.
                example: parameter-not-valid
                enum:
                - parameter-not-supplied
                - parameter-not-valid
                - unsupported-accept
                - invalid-content
                - institution-not-supported
                - invalid-credentials
              detail:
                type: string
                description: Human-readable explanation specific to this occurrence
                  of the problem.
                example: The provided filter parameter is in invalid format or unsupported.
              source:
                $ref: '#/components/schemas/Source'
              title:
                type: string
                description: Title of the error
                example: Parameter not valid.
              type:
                type: string
                description: Type of the response, always "error"
                example: error
    ForbiddenAccessError:
      required:
      - correlationId
      - data
      - type
      type: object
      properties:
        correlationId:
          type: string
          description: Unique identifier for this particular occurrence of the problem.
          example: ac5ah5i
        data:
          type: array
          description: Error data.
          items:
            required:
            - code
            - source
            - type
            type: object
            properties:
              code:
                type: string
                description: Application-specific error code, expressed as a string
                  value.
                example: forbidden-access
                enum:
                - forbidden-access
                - no-production-access
                - access-denied
              detail:
                type: string
                description: Human-readable explanation specific to this occurrence
                  of the problem.
                example: Access to this resource is forbidden.
              source:
                $ref: '#/components/schemas/Source'
              title:
                type: string
                description: Title of the error
                example: Forbidden Access
              type:
                type: string
                description: Type of the response, always "error"
                example: error
        type:
          type: string
          description: Always "list".
          example: list
    InternalServerError:
      required:
      - correlationId
      - data
      - type
      type: object
      properties:
        correlationId:
          type: string
          description: Unique identifier for this particular occurrence of the problem.
          example: ac5ah5i
        data:
          type: array
          description: Error data.
          items:
            required:
            - code
            - type
            type: object
            properties:
              code:
                type: string
                description: Application-specific error code, expressed as a string
                  value.
                example: internal-server-error
                enum:
                - internal-server-error
              detail:
                type: string
                description: Human-readable explanation specific to this occurrence
                  of the problem.
                example: Internal Server error. Contact support.
              title:
                type: string
                description: Title of the error
                example: Internal Server error.
              type:
                type: string
                description: Type of the response, always "error"
                example: error
        type:
          type: string
          description: Always "list".
          example: list
    NotFoundError:
      required:
      - correlationId
      - data
      - type
      type: object
      properties:
        correlationId:
          type: string
          description: Unique identifier for this particular occurrence of the problem.
          example: ac5ah5i
        data:
          type: array
          description: Error data.
          items:
            required:
            - code
            - type
            type: object
            properties:
              code:
                type: string
                description: Application-specific error code, expressed as a string
                  value.
                example: resource-not-found
                enum:
                - resource-not-found
              detail:
                type: string
                description: Human-readable explanation specific to this occurrence
                  of the problem.
                example: Resource not found.
              title:
                type: string
                description: Title of the error
                example: Requested resource is not found.
              type:
                type: string
                description: Type of the response, always "error"
                example: error
        type:
          type: string
          description: Always "list".
          example: list
    ResourceLink:
      title: ResourceLink
      required:
      - self
      type: object
      properties:
        self:
          type: string
          description: URL of the resource.
          example: "https://au-api.basiq.io/users/cd6fbd92/accounts/319ae910"
      description: Link object containing a link to the resource, self reference.
    ResourceAccountLink:
      title: ResourceAccountLink
      required:
      - self
      type: object
      properties:
        self:
          type: string
          description: URL of the resource.
          example: "https://au-api.basiq.io/users/cd6fbd92/accounts/319ae910"
        transactions:
          type: string
          description: transactions link to the transactions associated with this account.
          example: "https://au-api.basiq.io/users/ea3a81/transactions?filter=account.id.eq('s55bf3')"
        connection:
          type: string
          description: connection associated to User. 
          example: "https://au-api.basiq.io/users/cd6fbd92/connections/321312asa"
        institution:
          type: string
          description: institution link to the institution associated with this account.
          example: "https://au-api.basiq.io/institutions/AU00000"
        statements:
          type: string
          example: []
      description: Link object containing a link to the resource, self reference.
    
    Source:
      title: Source
      type: object
      properties:
        parameter:
          type: string
          description: String indicating which URI query parameter caused the error.
          example: userId
        pointer:
          type: string
          description: Location to the object or attribute that the error relates
            to.
          example: users/userId
      description: An object containing references to the source of the error.
    StatusServiceUnavailableError:
      required:
      - correlationId
      - data
      - type
      type: object
      properties:
        type:
          type: string
          description: Always "list".
          example: list
        correlationId:
          type: string
          description: Unique identifier for this particular occurrence of the problem.
          example: ac5ah5i
        data:
          type: array
          description: Error data.
          items:
            required:
            - code
            - type
            type: object
            properties:
              type:
                type: string
                description: Type of the response, always "error"
                example: error
              title:
                type: string
                description: Title of the error
                example: Service Unavailable
              code:
                type: object
                description: Application-specific error code, expressed as a string
                  value.
                example: service-unavailable
              detail:
                type: string
                description: Human-readable explanation specific to this occurrence
                  of the problem.
                example: Service Unavailable. Try again later.
    TransactionData:
      required:
      - id
      - status
      - description
      - reference
      - account
      - amount
      - balance
      - class
      - subClass
      - connection
      - direction
      - enrich
      - institution
      - links
      - postDate
      - transactionDate
      - type
      type: object
      properties:
        type:
          type: string
          description: Value is "transaction".
          example: transaction
        id:
          type: string
          description: Uniquely identifies the transaction for this connection. Note
            that when a connection is refreshed pending transactions will receive
            new id's, whilst posted transactions will receive the same id's as before
            the refresh.
          example: d3de1ca1
        status:
          type: string
          description: Identifies if a transaction is pending or posted. A pending
            transaction is an approved debit or credit transaction that has not been
            fully processed yet (i.e. has not been posted). Note that pending
            transactions are not available for all institutions.
          example: posted
          enum:
          - pending
          - posted
        description:
          type: string
          description: The transaction description as submitted by the institution.
        reference:
          type: string
          description: The reference for the transaction provided by the originating institution.
        amount:
          type: string
          description: Transaction amount. Outgoing funds are expressed as negative
            values.
          example: "123.12"
        account:
          type: string
          description: The id of the account resource the transaction belongs to.
          example: d3de1ca1
        balance:
          type: string
          description: Value of the account balance at time the transaction was completed.
          example: "123.12"
        direction:
          type: string
          description: Identifies if the transaction is of debit or credit type.
          example: debit
          enum:
          - debit
          - credit
        class:
          type: string
          description: Describes the class(type) of transaction.
          example: payment
          enum:
          - bank-fee
          - payment
          - cash-withdrawal
          - transfer
          - loan-interest
          - refund
          - direct-credit
          - interest
          - loan-repayment
        institution:
          type: string
          description: The id of the institution resource the transaction originated
            from.
          example: AU00000
        connection:
          type: string
          description: The id of the connection resource that was used to retrieve
            the transaction.
          example: d3de1ca1
        transactionDate:
          type: string
          description: Date that the user executed the transaction as provided by
            the institution. Note that not all transactions provide this value (varies
            by institution) e.g. "2017-11-10T00:00:00Z"
          example: null
        postDate:
          type: string
          description: Date the transaction was posted as provided by the institution
            (this is the same date that appears on a bank statement). This value is
            null if the record is pending. e.g. "2017-11-10T21:46:44Z" or 2017-11-10T00:00:00Z.
          example: "2018-11-02T00:00:00Z"
        subClass:
          type: object
          description: >-
            The subClass attribute will only return values for payment transactions (i.e. will be empty for all others) plus [new] bank fee transactions for those relating to account conduct such as account overdrawn and direct debit dishonours.
          properties:
            code:
              type: string
              description: code
              example: 722
            title:
              type: string
              description: SubClass title
              example: Cafes and Restaurants
        enrich:
          $ref: '#/components/schemas/TransactionsEnrich'
        links:
          $ref: '#/components/schemas/TransactionLinks'
    TransactionLinks:
      required:
      - account
      - connection
      - institution
      - self
      type: object
      properties:
        account:
          type: string
          description: Url of the account.
          example: https://au-api.basiq.io/users/6a52015e/accounts/31eb30a0
        institution:
          type: string
          description: Url of the institution.
          example: https://au-api.basiq.io/institutions/AU00000
        self:
          type: string
          description: Transaction self reference.
          example: https://au-api.basiq.io/users/6a52015e/transactions/2082c765
    TransactionsAnzsic:
      type: object
      properties:
        division:
          $ref: '#/components/schemas/TransactionsDivision'
        subdivision:
          $ref: '#/components/schemas/TransactionsSubdivision'
        group:
          $ref: '#/components/schemas/TransactionsGroup'
        class:
          $ref: '#/components/schemas/TransactionsClass'
        subclass:
          $ref: '#/components/schemas/TransactionsSubClass'
    TransactionsCategory:
      type: object
      properties:
        matchType:
          type: string
          description: >
            Indicates the method used to match a payment transaction with a merchant or business classification code. Description for each enum;
            merchantFull: Indicates an exact match between the transaction and a known merchant in the database.
            merchantPartial: Suggests a partial match with a merchant, usually based on substring or fuzzy logic.
            mcc: Match is done using the Merchant Category Code associated with the transaction.
            ml: Match is determined through machine learning algorithms for classification
          enum:
            - merchantFull
            - merchantPartial
            - mcc
            - ml
          example: "merchantfull"
        matchScore:
          type: string
          description: The confidence score for the matchType which is a float value between 0 and 1. The higher the number, the higher the confidence in the match.
          example: "1.0"
        mcc:
          type: object
          description: >-
            Merchant category codes returned from Data holders.
          properties:
            code:
              type: string
              description: code
              example: 3012
            title:
              type: string
              description: title
              example: Qantas
        anzsic:
          $ref: '#/components/schemas/TransactionsAnzsic'
    TransactionsClass:
      type: object
      properties:
        title:
          type: string
          description: Class Details
          example: Cafes and Restaurants
        code:
          type: string
          description: Class Code
          example: "4511"
    TransactionsDivision:
      type: object
      properties:
        title:
          type: string
          description: Division Details
          example: Accommodation and Food Services
        code:
          type: string
          description: Division Code
          example: H
    TransactionsEnrich:
      required:
      - cleanDescription
      - tags
      - category
      - location
      - merchant
      type: object
      properties:
        location:
          $ref: '#/components/schemas/TransactionsLocation'
        cleanDescription:
          $ref: "#/components/schemas/TransactionscleanDescription"
        tags:
          $ref: "#/components/schemas/Transactionstags"
        merchant:
          $ref: '#/components/schemas/TransactionsMerchant'
        category:
          $ref: '#/components/schemas/TransactionsCategory'
    Transactionstags:
      type: array
      items:
       type: string
       example: card:4615
    TransactionscleanDescription:
      type: string
      description: ""
    TransactionsGeometry:
      type: object
      properties:
        lat:
          type: string
          description: Latitude
          example: "-33.79988520000001"
        lng:
          type: string
          description: Longitude
          example: "151.2858021"
    TransactionsGetLinks:
      required:
      - self
      type: object
      properties:
        self:
          type: string
          description: Self reference url.
          example: https://au-api.basiq.io/users/ea3a81/transactions
        next:
          type: string
          description: Url to next result.
          example: https://au-api.basiq.io/users/6a52015e/transactions?next=bf1ec9d4
    TransactionsGetResource:
      title: Transactions container object.
      required:
      - count
      - data
      - size
      - type
      type: object
      properties:
        type:
          type: string
          description: Value is "list".
          example: list
        count:
          type: integer
          description: Count of the transactions in the response.
          format: int64
          example: 100
        size:
          type: integer
          format: int64
          example: 500
        data:
          type: array
          items:
            $ref: '#/components/schemas/TransactionData'
        links:
          $ref: '#/components/schemas/TransactionsGetLinks'
      description: A transaction object is created whenever money is debited or credited from a particular account.
    TransactionsGroup:
      type: object
      properties:
        code:
          type: string
          description: Group Code
          example: "451"
        title:
          type: string
          description: Group Details
          example: Cafes, Restaurants and Takeaway Food Services
    TransactionsLocation:
      type: object
      properties:
        country:
          type: string
          description: Country
          example: Australia
        formattedAddress:
          type: string
          description: Address
          example: "1/39 E Esplanade, Manly NSW 2095"
        geometry:
          $ref: '#/components/schemas/TransactionsGeometry'
        postalCode:
          type: string
          description: Postal Code
          example: "2095"
        route:
          type: string
          description: Route Name
          example: E Esplanade
        routeNo:
          type: string
          description: Route Number
          example: "29"
        state:
          type: string
          description: State
          example: NSW
        suburb:
          type: string
          description: Suburb
          example: Manly
    TransactionsMerchant:
      required:
      - id
      - businessName
      - ABN
      - website
      - logoMaster
      - logoThumb
      type: object
      properties:
        id:
          type: string
          description: id
          example: "ae4a051c-4791-11e8-8750-0a87c0279fe8"
        businessName:
          type: string
          description: Merchant name
          example: Garfish Manly
        ABN:
          type: string
          description: ABN
          example: 90065628864
        logoMaster:
          type: string
          description: full merchant logo
          example: 'https://enrich-enrichmerchantslogobucket-x62p53eh5ld9.s3-ap-southeast-2.amazonaws.com/officeworks-master.png'
        logoThumb:
          type: string
          description: thumbnail merchant logo
          example: 'https://enrich-enrichmerchantslogobucket-x62p53eh5ld9.s3-ap-southeast-2.amazonaws.com/officeworks-thumb.png'
        phoneNumber:
          $ref: '#/components/schemas/TransactionsPhoneNumber'
        website:
          type: string
          description: Merchant Website
          example: "http://garfish.com.au/garfish-manly/"
    TransactionsPhoneNumber:
      type: object
      properties:
        international:
          type: string
          description: International Phone Number
          example: "+61 2 9977 0707"
        local:
          type: string
          description: Local Phone Number
          example: "(02) 9977 0707"
    TransactionsSubdivision:
      type: object
      properties:
        code:
          type: string
          description: Subdivision Code
          example: "45"
        title:
          type: string
          description: Subdivision Details
          example: Food and Beverage Services
    TransactionsSubClass:
      type: object
      properties:
        title:
          type: string
          description: SubClass Details
          example: Cafes and Restaurants
        code:
          type: string
          description: SubClass Code
          example: "451100"
  securitySchemes:
    services_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - services_token: []
x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
  samples-languages:
    - curl
    - node
    - ruby
    - javascript
    - python